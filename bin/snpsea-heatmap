#!/usr/bin/env python
"""
snpsea-heatmap

Create a heatmap of from the snp_condition_scores.txt file produced by snpsea.

This reveals the composition of each condition's specificity score by
displaying all SNP-gene pairs and their contributions. Each heatmap cell is
annotated with the name of the gene in the given locus (column) with the
greatest specificity to the given condition (row).

Usage:
    snpsea-heatmap <out> [--gene-matrix FILE --alpha NUM --title STR --fontsize NUM]

Options:
    -h, --help          Show this message and exit.
    <out>               Directory with output files created by snpsea.
    --gene-matrix FILE  Override the --gene-matrix argument in args.txt.
    --title STR         Title for the figure.
    --alpha NUM         Significance threshold [default: 0.05].
    --fontsize NUM      Font size [default: 12.0].

Author:
    Kamil Slowikowski <slowikow@broadinstitute.org>
"""


from docopt import docopt
import matplotlib as mp
import numpy as np
import pandas as pd
import pylab as pl
import textwrap as tw
import re
import os


def main():
    args = docopt(__doc__)

    mp.rc('font', family='serif', size=float(args['--fontsize']))

    out = lambda x: os.path.join(args['<out>'], x)
    
    matrix = args['--gene-matrix'] or find_gene_matrix(out('args.txt'))

    if not args['--title']:
        args['--title'] = os.path.basename(args['<out>'].rstrip('/'))

    heatmap(out('condition_pvalues.txt'),
            matrix,
            out('snp_condition_scores.txt'),
            out('snp_condition_heatmap.pdf'),
            title=args['--title'],
            alpha=float(args['--alpha']))


def heatmap(f_condition_pvalues, f_matrix, f_snp_condition_scores,
            f_heatmap, title='', alpha=0.05):
    # Bonferroni corrected p-value for each condition.
    condition_pvalues = pd.read_table(f_condition_pvalues)
    bonf = 1 - (1 - condition_pvalues.pvalue) ** condition_pvalues.shape[0]
    # Select just the significant pvalues.
    condition_pvalues = condition_pvalues[bonf < alpha]

    # No condition is significant.
    if condition_pvalues.shape[0] == 0:
        print "Exit. No conditions have significant enrichment results!"
        return

    def make_label((condition, pvalue, nulls, reps)):
        if nulls == 1:
            equality = '<'
        else:
            equality = '='
        return '{}\nP {} {:0.2e}'.format(condition, equality, pvalue)


    conditions = condition_pvalues.condition.tolist()[::-1]
    labels = condition_pvalues.apply(make_label, axis=1).tolist()[::-1]

    # Detect compression.
    comp = 'gzip' if f_matrix.endswith('.gz') else None

    # Convert EntrezGene ID numbers to HGNC symbols.
    matrix = pd.read_table(f_matrix, 
                           compression=comp,
                           skiprows=2,
                           index_col=0)
    genelist = list(matrix['Description'].iteritems())
    genedict = {}
    for entrezid, symbol in genelist:
        genedict[entrezid] = symbol

    # Read snp-condition pairs and the representative gene symbols.
    df         = pd.read_table(f_snp_condition_scores)
    df['gene'] = df['gene'].map(lambda x: genedict.get(x, x))
    # Get a matrix of conditions and SNP loci with gene symbols.
    symbols    = df.pivot(index='snp', columns='condition', values='gene')
    # And a matrix of conditions and SNP loci with scores.
    scores     = df.pivot(index='snp', columns='condition', values='score')

    # Select just the significant scores.
    symbols = symbols[conditions]
    scores = scores[conditions]

    # Select just SNPs that have at least one significant gene.
    idx = scores.apply(lambda row: any(row < alpha), axis=1)
    # No SNP is significant.
    if not any(idx):
        return
    symbols = symbols[idx]
    scores = scores[idx]
   
    # Sort the SNPs by their max contribution to the significant conditions.
    contribs = scores.apply(lambda r: np.log(r.replace(0, 1)).sum(), axis=1)
    idx = np.argsort(contribs)
    symbols = symbols.ix[idx]
    scores = scores.ix[idx]

    cell_size = 1.9
    n_snps = scores.shape[0]
    n_conditions = len(conditions)

    # Golden rectangle.
    figsize = (n_snps * cell_size, 0.618 * n_conditions * cell_size)
    fig = pl.figure(figsize=figsize)

    # Transform the scores for plotting.
    log10_scores = -np.log10(scores.T)

    minp = np.floor(np.min(log10_scores.values))
    maxp = np.ceil(np.max(log10_scores.values))
    ticks = np.linspace(minp, maxp, maxp - minp + 1)

    # Plot heatmap.
    ax = fig.add_axes([0.3, 0.1, 0.6, 0.6])
    cmap = pl.cm.Reds
    norm = mp.colors.BoundaryNorm(ticks, cmap.N)
    im = ax.matshow(log10_scores, aspect='auto', origin='lower',
                    cmap=cmap, norm=norm)

    # Ticks.
    ax.tick_params(length=0)
    ax.xaxis.tick_bottom()
    ax.set_xticks(np.arange(n_snps))
    ax.set_yticks(np.arange(n_conditions))

    # Labels. If the locus is represented by joined SNPs, print line by line.
    xlabels = [x.replace(',', '\n') for x in list(scores.index)]
    ax.set_xticklabels(xlabels, rotation=0)
    ax.set_yticklabels(map(lambda x: x.replace('_', ' '), labels))
    ax.set_title(title)

    # Plot the NCBI gene names.
    xy = [(x, y) for x in range(n_snps) for y in range(n_conditions)]
    for x, y in xy:
        ax.text(x, y, tw.fill(str(symbols.ix[x, y]), 8),
                bbox=dict(color='white', boxstyle='round'),
                ha='center', va='center')

    # Plot a colorbar.
    axcolor = fig.add_axes([0.91, 0.1, 0.02, 0.6])

    colorbar = pl.colorbar(im, cax=axcolor, ticks=ticks)

    colorbar.set_label('Specificity score')
    colorbar.set_ticklabels([''] * len(ticks))

    # Save.
    fig.savefig(f_heatmap, bbox_inches='tight')


def find_gene_matrix(filename):
    with open(filename) as f:
        for line in f:
            m = re.search('--gene-matrix\s+([^\n]+)', line)
            if m:
                return m.groups()[0].rstrip()
    return None


if __name__ == '__main__':
    main()
